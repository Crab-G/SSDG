Cursor Rule for iOS Application: Virtual User Data Generator with Apple Health Sync

简介

本Cursor Rule旨在帮助个人开发者，尤其是编程经验有限的用户，使用Xcode和Cursor开发一个iOS应用。该应用生成虚拟用户（包含年龄、性别、身高、体重等属性），模拟30-120天的历史睡眠和步数数据，基于历史数据生成每日数据，并通过HealthKit同步到Apple Health。本规则通过AI引导，简化从创意到代码的开发流程，适合快速验证应用创意和构建最小可行产品（MVP）。

核心功能模块

/requirement - 需求收集





描述：通过结构化对话收集应用需求，确保开发聚焦于用户价值。



流程：





定义虚拟用户属性及其范围（年龄18-40岁，性别男/女/其他，身高150.0-190.0厘米，体重50.0-100.0公斤）。



指定历史和每日数据的生成规则（睡眠7-9小时，步数5000-15000步，包含波动、异常、周末效应等）。



确定用户界面需求（生成和同步按钮，数据摘要显示）。



自动分析技术可行性，生成应用页面结构和导航流程。



示例对话：





AI：虚拟用户需要哪些属性？



用户：年龄（18-80岁）、性别（男、女、其他）、身高（150.0-200.0厘米）、体重（50.0-100.0公斤）。



AI：历史数据需要生成多少天？



用户：随机30-120天。



AI：睡眠和步数数据如何生成？



用户：睡眠：基准值7-9小时，±15%波动，周末增加10-20%，15%概率±10-30%异常，连续性约束，健康补偿；步数：基准值5000-15000步，±30%波动，范围800-20000步。



AI：每日数据如何基于历史数据生成？



用户：基于前7天平均值，加入随机变化。



AI：用户界面需要什么？



用户：一个生成数据和同步的按钮，以及数据摘要显示。



输出：生成包含用户属性、数据生成规则和界面设计的README.md文件。

/develop - 代码开发





描述：根据需求生成符合Apple人机界面指南的Swift代码。



流程：





将应用分解为以下功能模块：





虚拟用户生成



历史数据生成



每日数据生成



HealthKit集成



用户界面（SwiftUI）



为每个模块制定技术方案（包括数据模型、算法、API调用）。



生成Swift代码，确保结构清晰、可维护，遵循暗色科技风格（毛玻璃效果和像素风设计）。



支持批量生成所有模块代码或逐个开发特定模块。



技术方案：





用户模型：使用struct User定义属性，包含年龄、性别、身高、体重。



数据生成：





睡眠数据：基于基准值生成总睡眠时间，模拟睡眠周期（轻度、深度、REM、清醒），包含入睡时间和夜间清醒。



步数数据：生成日内步数分布，集中在8:00-20:00。



HealthKit：使用HealthKit框架写入睡眠和步数数据，处理权限请求。



界面：使用SwiftUI创建包含按钮和数据摘要的简单界面。

/check - 代码质量检查





描述：确保生成的代码质量高、功能正常且可维护。



流程：





检查Swift语法和代码结构。



验证UI布局和自适应性（支持不同设备尺寸）。



检查HealthKit权限处理和错误管理。



确保代码在Xcode中可编译运行。



输出：生成检查报告，列出潜在问题和修复建议。

/test - 测试生成





描述：自动生成测试用例，验证应用功能和稳定性。



流程：





生成单元测试，验证用户生成和数据生成函数的正确性。



生成UI测试，验证按钮功能和数据显示。



测试HealthKit数据同步，确保数据格式正确。



测试文件放置在Xcode项目测试目录中，便于执行。



示例测试：





单元测试：检查生成的年龄是否在18-80岁范围内。



UI测试：验证点击“生成数据”按钮是否正确显示摘要。



集成测试：确认数据成功写入Apple Health。

数据生成逻辑

用户基准值





睡眠基准值：随机分配7-9小时，使用用户ID哈希确保一致性。



步数基准值：随机分配5000-15000步，同样使用哈希。



实现：通过String.hashValue或自定义哈希函数生成一致的随机种子。

睡眠数据生成





总睡眠时间（TST）：





基于基准值，应用±15%日常波动。



周末（周六、周日）增加10-20%，上限12小时。



15%概率触发±10-30%异常变化。



相邻天差异不超过2小时。



连续3天睡眠<6小时后，强制恢复到基准值。



睡眠阶段：





模拟4-6个睡眠周期（每周期约90分钟），包含轻度睡眠（50-60%）、深度睡眠（15-20%）、REM睡眠（20-25%）。



早期周期深度睡眠较多，后期REM睡眠较多。



包含2次左右夜间清醒（正态分布，均值2，标准差1），每次持续5-30分钟（对数正态分布，均值15分钟）。



入睡时间随机分布在21:00-00:00，清醒间隔30-120分钟。



HealthKit映射：





.inBed：从入睡时间到起床时间。



.asleepCore：轻度睡眠（N1和N2）。



.asleepDeep：深度睡眠（N3）。



.asleepREM：REM睡眠。



.awake：夜间清醒时间。

步数数据生成





总步数：





基于基准值±30%变化，范围800-20,000步。



15%概率触发异常事件（±10-30%变化）。



日内分布：





集中在8:00-20:00，每小时生成步数，模拟真实活动模式（如通勤、午休等）。



分配方式：总步数按比例分配到活跃小时，加入随机波动（±50%）。



HealthKit映射：





使用HKQuantitySample存储每小时步数，类型为.stepCount。

历史数据生成





时间范围：随机选择30-120天。



流程：





为每一天生成睡眠和步数数据，遵循上述逻辑。



存储历史数据（至少最近3天的睡眠时间）以支持每日生成时的约束检查。

每日数据生成





依赖历史数据：





检查前3天睡眠时间，若均<6小时，强制恢复到基准值。



确保睡眠时间与前一天差异≤2小时。



步数基于7天平均值，加入随机波动。



自动化：通过后台任务或定时器每天生成并同步数据。

使用说明





启动 /requirement：通过AI对话明确需求，生成项目结构和文档。



执行 /develop：选择批量生成所有模块代码或逐个开发，AI将生成Swift代码。



运行 /check：检查生成的代码，确保质量和功能。



使用 /test：生成并运行测试用例，验证应用功能。



查看文档：项目进度和结构自动保存在README.md文件中。

注意事项





逐模块开发：建议一次开发一个功能模块，便于调整和优化。



Xcode检查：生成代码后立即在Xcode中验证，检查错误并修复。



HealthKit设置：在Xcode中启用HealthKit功能，添加NSHealthShareUsageDescription和NSHealthUpdateUsageDescription到Info.plist。



初学者建议：从简单功能开始，逐步学习Swift和HealthKit相关知识。



细节优化：AI生成的代码是框架，需用户进一步优化交互、用户体验和功能完整性。



数据真实性：通过模拟睡眠阶段和日内步数分布，确保数据与Apple Watch等设备生成的数据相似。

